<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Git教程</title>
      <link href="/2021/07/30/Git%E6%95%99%E7%A8%8B/"/>
      <url>/2021/07/30/Git%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><p><img src="https://git-scm.com/images/branching-illustration@2x.png" alt="img"></p><h1 id="Git-简介"><a href="#Git-简介" class="headerlink" title="Git 简介"></a>Git 简介</h1><p>1、Git 是目前世界上最先进的 ==<strong>分布式版本控制系统</strong>==</p><hr><br><h2 id="集中式-VS-分布式"><a href="#集中式-VS-分布式" class="headerlink" title="集中式 VS 分布式"></a>集中式 VS 分布式</h2><p>1、==<strong>集中式版本控制系统</strong>==，版本库是集中存放在中央服务器的，而干活的时候，用的都是自己的电脑，所以要先从中央服务器取得最新的版本，然后开始干活，干完活了，再把自己的活推送给中央服务器。中央服务器就好比是一个图书馆，你要改一本书，必须先从图书馆借出来，然后回到家自己改，改完了，再放回图书馆。</p><br><p>2、<strong>集中式版本控制系统最大的缺点是必须联网才能工作</strong>。遇到网速不佳的情况下或没有网络的情况，根本无法有效开展工作</p><br><p>3、==<strong>分布式版本控制系统</strong>==根本没有“中央服务器”，<strong>每个人的电脑上都是一个完整的版本库，这样，你工作的时候，就不需要联网了，因为版本库就在你自己的电脑上</strong>。既然每个人电脑上都有一个完整的版本库，那多个人如何协作呢？比方说你在自己电脑上改了文件A，你的同事也在他的电脑上改了文件A，这时，你们俩之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。</p><br><p>4、在实际使用分布式版本控制系统的时候，其实很少在两人之间的电脑上推送版本库的修改，因为可能你们俩不在一个局域网内，两台电脑互相访问不了，也可能今天你的同事病了，他的电脑压根没有开机。因此，<strong>分布式版本控制系统通常也有一台充当“中央服务器”的电脑，但这个服务器的作用仅仅是用来方便“交换”大家的修改，没有它大家也一样干活，只是交换修改不方便而已。</strong></p><hr><br><br><h1 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h1><p>1、在 Windows 上使用，可以从 Git 官网直接下载安装程序，然后按默认选项安装即可。安装成功后，在开始菜单里找到 “Git -&gt; Git Bash”，打开是一个命令行窗口，就说明 Git 安装成功</p><img src="http://targzp-picture.oss-cn-beijing.aliyuncs.com/img/image-20210124132049196.png" alt="image-20210124132049196" style="zoom:67%;"><br><p>2、安装成功后，还需要最后一步设置，在命令行输入</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git config --global user.name <span class="string">"Your name"</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config --global user.email <span class="string">"email@example.com"</span></span> </span><br></pre></td></tr></tbody></table></figure><p>因为 Git 是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和 Email 地址</p><br><p>3、注意 <strong><code>git config</code> 命令</strong>的 <strong><code>--global</code> 参数</strong>，用了这个参数，表示你这台机器上<strong>所有的 Git 仓库都会使用这个配置</strong>，当然也可以对某个仓库指定不同的用户名和Email地址。</p><hr><br><br><h1 id="创建-版本库"><a href="#创建-版本库" class="headerlink" title="创建 版本库"></a>创建 版本库</h1><p>1、==<strong>版本库</strong>== ：又名仓库，英文名 repository。可以简单理解成一个目录，<strong>这个目录里面的所有文件都可以被 Git 管理起来，每个文件的修改、删除，Git 都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”</strong>。</p><br><p>2、创建一个版本库非常简单，首先，创建或者进入一个目录</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir web_project</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> web_project</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">pwd</span></span></span><br><span class="line">/e/web_project</span><br></pre></td></tr></tbody></table></figure><p>==<strong>pwd 命令</strong>== 用于显示当前目录。此时，这个仓库的位置在 /e/web_project (确保目录名不包含中文)</p><br><p>3、第二步，通过 ==<strong>git init 命令</strong>== <strong>把这个目录变成 Git 可以管理的仓库</strong></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git init</span></span><br><span class="line">Initialized empty Git repository in /e/web_project/.git/</span><br></pre></td></tr></tbody></table></figure><p>此处提示仓库以及创建完毕，且是一个空的仓库。这个目录中多了一个 <strong>.git 的目录</strong>，<strong>这个目录是 Git 来跟踪管理版本库的</strong>，非必要千万不要去修改它</p><br><p>4、 .git 目录默认是隐藏的，可以通过 ==<strong><code>ls -ah</code> 命令</strong>== 来查看</p><p><img src="http://targzp-picture.oss-cn-beijing.aliyuncs.com/img/image-20210125133125416.png" alt="image-20210125133125416"></p><br><h4 id="把文件添加到版本库"><a href="#把文件添加到版本库" class="headerlink" title="把文件添加到版本库"></a>把文件添加到版本库</h4><p>1、首先，编写一个 readme.txt 文件，内容如下：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Git is a version control system.</span><br><span class="line">Git is free software</span><br></pre></td></tr></tbody></table></figure><p>一定要放到 web_project 目录下（子目录也行），因为这是一个 Git 仓库</p><br><p>2、把一个文件放到 Git 仓库只需两步</p><ul><li><p>第一步，用命令 ==<strong>git add</strong>== <code>git add &lt;file&gt;</code> 告诉 Git，<strong>把文件添加到仓库</strong>（或理解为添加到提交列表中）：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git add readme.txt</span></span><br></pre></td></tr></tbody></table></figure><p>执行上面的命令，没有任何显示，这就对了，说明添加成功</p></li><li><p>第二步，用命令 ==<strong>git commit</strong>== <code>git commit -m &lt;message&gt;</code> 告诉 Git，<strong>把文件提交到仓库</strong>（或理解为提交列表中的文件的当前版本进行提交）：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">"wrote a readme file"</span></span></span><br><span class="line">[master (root-commit) eaadf4e] wrote a readme file</span><br><span class="line"> 1 file changed, 2 insertions(+)</span><br><span class="line"> create mode 100644 readme.txt</span><br></pre></td></tr></tbody></table></figure><p>==<strong>-m</strong>== <strong>后面输入的是本次提交的说明，可以输入任意内容，最好是有意义的，这样你就能从历史记录里方便地找到改动记录</strong>（提交时务必声明提交说明）</p></li></ul><br><p>2、git commit 命令执行成功后会告诉你，<strong>1 file changed：1 个文件被改动（我们新添加地 readme.txt）；2 insertions：插入了两行内容（readme.txt 有两行内容）</strong></p><br><p>3、为什么 Git 添加文件需要 add，commit 一共两步呢？因为 ==<strong>commit 可以一次提交很多文件，所以你可以多次 add 不同的文件</strong>==，比如：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git add file1.txt</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git add file2.txt file3.txt</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">"add 3 files."</span></span></span><br></pre></td></tr></tbody></table></figure><hr><br><br><h1 id="时光机穿梭"><a href="#时光机穿梭" class="headerlink" title="时光机穿梭"></a>时光机穿梭</h1><p>1、我们已经成功地添加并提交了一个readme.txt文件，现在，是时候继续工作了，于是，我们继续修改readme.txt文件，改成如下内容：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Git is a distrubuted version control system.</span><br><span class="line">Git is free software.</span><br></pre></td></tr></tbody></table></figure><p>现在，允许 ==<strong>git status</strong>==命令（查看工作区状态）看看结果</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git status</span></span><br><span class="line">On branch master</span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use "git add &lt;file&gt;..." to update what will be committed)</span><br><span class="line">  (use "git restore &lt;file&gt;..." to discard changes in working directory)</span><br><span class="line">        modified:   readme.txt</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">  (use "git add &lt;file&gt;..." to include in what will be committed)</span><br><span class="line">        blog/</span><br><span class="line">        desktop.ini</span><br><span class="line">        readme2.txt</span><br><span class="line"></span><br><span class="line">no changes added to commit (use "git add" and/or "git commit -a")</span><br></pre></td></tr></tbody></table></figure><p>git status 命令可以让我们<strong>时刻掌握仓库当前状态</strong>，上面的命令输出告诉我们，<strong>readme.txt 被修改过了，但还没有准备提交</strong></p><br><p>2、虽然Git告诉我们<code>readme.txt</code>被修改了，但如果能看看具体修改了什么内容，自然是很好的。比如你休假两周从国外回来，第一天上班时，已经记不清上次怎么修改的<code>readme.txt</code>，所以，需要用==<strong>git diff</strong>== （查看修改内容）这个命令看看：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">git diff readme.txtdiff --git a/readme.txt b/readme.txtindex 46d49bf..9247db6 100644--- a/readme.txt+++ b/readme.txt@@ -1,2 +1,2 @@-Git is a version control system.+Git is a distributed version control system. Git is free software.</span></span><br></pre></td></tr></tbody></table></figure><p>git diff 顾名思义就是查看 difference，显示的格式正是 Unix 通用的 diff 格式，可以从上面的命令看出，我们在第一行添加了一个 distributed 单词</p><br><p>3、知道了对<code>readme.txt</code>作了什么修改后，再把它提交到仓库就放心多了，==<strong>提交修改和提交新文件是一样的两步</strong>==，第一步是<code>git add</code>：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git add readme.txt</span></span><br></pre></td></tr></tbody></table></figure><p>同样没有任何输出。在执行第二步<code>git commit</code>之前，我们再运行<code>git status</code>看看当前仓库的状态:</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git statusOn branch masterChanges to be committed:  (use <span class="string">"git reset HEAD &lt;file&gt;..."</span> to unstage)modified:   readme.txt</span></span><br></pre></td></tr></tbody></table></figure><br><h4 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h4><p>1、版本控制系统中的 ==<strong>git log</strong>== 命令可以告诉我们<strong>版本提交记录</strong>：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git logcommit 69d7bd20bc75225bb1a41c43c8e2d7c9794fec86 (HEAD -&gt; master)Author: 18601477532 &lt;2392859135@qq.com&gt;Date:   Sat Jan 23 13:12:23 2021 +0800    append GPLcommit 5b349a6ac81809272b665edf7b8ea8ca53d66955Author: 18601477532 &lt;2392859135@qq.com&gt;Date:   Fri Jan 22 13:17:16 2021 +0800    add distributedcommit 260f923ce4d9106b876fed8b99c347f37bf8d8efAuthor: 18601477532 &lt;2392859135@qq.com&gt;Date:   Fri Jan 22 13:05:07 2021 +0800    It<span class="string">'s just a test</span></span></span><br></pre></td></tr></tbody></table></figure><p>git log 命令显示从最近到最远的提交日志，我们在这里可以看到 3 次 提交</p><br><p>2、可以加上 ==<strong>–pretty=oneline</strong>== 参数使提交记录日志看起来更简洁：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> --pretty=oneline69d7bd20bc75225bb1a41c43c8e2d7c9794fec86 (HEAD -&gt; master) append GPL5b349a6ac81809272b665edf7b8ea8ca53d66955 add distributed260f923ce4d9106b876fed8b99c347f37bf8d8ef It<span class="string">'s just a test</span></span></span><br></pre></td></tr></tbody></table></figure><br><p>3、一大串类似 69d7… 的是 ==<strong>commit id（版本号）</strong>== </p><br><p>4、如何把 readme.txt 回退到上一个版本呢？首先，Git 必须知道当前版本是哪个版本，在 Git 中，用 ==<strong>HEAD</strong>== <strong>表示当前版本</strong> ，也就是最新的提交 697d…。<strong>上一个版本</strong>就是 ==<strong>HEAD^</strong>== ，<strong>上上一个版本</strong>就是 ==<strong>HEAD^^</strong>== 。<strong>往上 100 个版本</strong>写 100 个 ^ 当然很麻烦，所以可以写成 ==<strong>HEAD~100</strong>==</p><br><p>5、现在，我们要把当前版本 append GPL 回退到上一个版本 add distributed，就可以使用 ==<strong>git reset 命令</strong>== ：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git reset --hard HEAD^HEAD is now at 5b349a6 add distributed</span></span><br></pre></td></tr></tbody></table></figure><p>我们用 git log 再看看现在版本库的状态：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git logcommit 5b349a6ac81809272b665edf7b8ea8ca53d66955 (HEAD -&gt; master)Author: 18601477532 &lt;2392859135@qq.com&gt;Date:   Fri Jan 22 13:17:16 2021 +0800    add distributedcommit 260f923ce4d9106b876fed8b99c347f37bf8d8efAuthor: 18601477532 &lt;2392859135@qq.com&gt;Date:   Fri Jan 22 13:05:07 2021 +0800    It<span class="string">'s just a test</span></span></span><br></pre></td></tr></tbody></table></figure><p>此时，最新版本 append GPL 已经看不到了。但是我还想回到 append GPL 这个版本怎么办？</p><br><p>6、当你用 <code>$git reset --hard HEAD^</code> 回退到 add distributed 版本时，<strong>再想恢复到 append GPL，就必须找到 append GPL 的 commit id</strong>。Git 提供了一个命令 ==<strong>git reflog</strong>== 用来<strong>记录你的每一次命令</strong></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git reflog5b349a6 (HEAD -&gt; master) HEAD@{11}: reset: moving to HEAD^69d7bd2 HEAD@{12}: commit: append GPL5b349a6 (HEAD -&gt; master) HEAD@{13}: commit: add distributed260f923 HEAD@{14}: commit (initial): It<span class="string">'s just a test</span></span></span><br></pre></td></tr></tbody></table></figure><p>从输出可知，<strong>append GPL 的 commid id 是 69d7bd2</strong>。于是就可以通过这个版本号回到这个版本：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git reset --hard 69d7HEAD is now at 69d7bd2 append GPL</span></span><br></pre></td></tr></tbody></table></figure><br><p>7、Git 的版本回退速度非常快，因为 Git 在内部有个指向当前版本的 ==<strong>HEAD 指针</strong>==，<strong>当你回退版本的时候，Git 仅仅是把 HEAD 从指向 append GPL 改为 指向 add distributed</strong></p><p><img src="http://targzp-picture.oss-cn-beijing.aliyuncs.com/img/image-20210128150714083.png" alt="image-20210128150714083"></p><p>然后顺便把工作区的文件更新了。所以你让 HEAD 指向哪个版本，你就把当前版本定位在哪</p><br><h4 id="工作区和暂存区"><a href="#工作区和暂存区" class="headerlink" title="工作区和暂存区"></a>工作区和暂存区</h4><p>1、==<strong>工作区</strong>== 就是<strong>你在电脑里能看到的目录</strong>，比如现在当前的文件夹 <code>web_project</code> 就是一个工作区</p><br><p>2、工作区有一个隐藏目录 <code>.git</code> ，这个不算工作区，而是 ==<strong>Git 的版本库</strong>== </p><br><p>3、Git 的版本库中最终的就是称为 ==<strong>stage（或者叫 index）的暂存区</strong>== ，还有 Git 为我们自动创建的 ==<strong>第一个分支 master</strong>==，以及指向 master 的第一个指针叫 HEAD</p><p><img src="http://targzp-picture.oss-cn-beijing.aliyuncs.com/img/image-20210201125627808.png" alt="image-20210201125627808"></p><br><p>4、前面讲了我们把文件往 Git 版本库里添加的时候，是分两步执行的：</p><ul><li>第一步是用 <code>git add</code> 把文件添加进去，==<strong>实际上就是把文件修改添加暂存区</strong>==</li><li>第二步是用 <code>git commit</code> 提交更改，==<strong>实际上就是把暂存区的所有内容提交到当前分支</strong>== </li></ul><br><p>5、因为我们创建版本库时，Git 自动为我们创建了唯一一个 <strong>master 分支</strong>，所以，现在，**<code>git commit</code> 就是往 master 分支上提交更改**</p><br><p>6、以上行为可以简单理解为，<strong>需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改</strong></p><br><p>7、我们可以练习一遍，先对 <code>readme.txt</code> 做一个修改，比如加上一行内容</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Git is a distributed version control system.Git is free software distributed under the GPL.Git has a mutable index called stage.</span><br></pre></td></tr></tbody></table></figure><p>然后，在工作区新增一个 LICENSE 文本文件（内容随便写）</p><p>先用 <code>git status</code> 查看一下状态：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git statusOn branch masterChanges not staged <span class="keyword">for</span> commit:  (use <span class="string">"git add &lt;file&gt;..."</span> to update what will be committed)  (use <span class="string">"git checkout -- &lt;file&gt;..."</span> to discard changes <span class="keyword">in</span> working directory)modified:   readme.txtUntracked files:  (use <span class="string">"git add &lt;file&gt;..."</span> to include <span class="keyword">in</span> what will be committed)LICENSEno changes added to commit (use <span class="string">"git add"</span> and/or <span class="string">"git commit -a"</span>)</span></span><br></pre></td></tr></tbody></table></figure><p>Git 非常清楚地告诉我们，<code>readme.txt</code> 被修改了，<strong>而 <code>LICENSE</code> 还从来没有被添加过，所以它的状态是 <code>Untracked</code></strong> </p><p>现在，使用两次命令 <code>git add</code> ，把 <code>readme.txt</code> 和 <code>LICENSE</code> 都添加后，用 <code>git status</code> 再查看一下：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git statusOn branch masterChanges to be committed:  (use <span class="string">"git reset HEAD &lt;file&gt;..."</span> to unstage)new file:   LICENSEmodified:   readme.txt</span></span><br></pre></td></tr></tbody></table></figure><p>现在，暂存区的状态就变成这样了：</p><p><img src="http://targzp-picture.oss-cn-beijing.aliyuncs.com/img/image-20210201131709456.png" alt="image-20210201131709456"></p><p>所以，**<code>git add</code> 命令实际上就是把要提交的所有修改放到暂存区（Stage）<strong>，然后，</strong>执行 <code>git commit</code> 就可以一次性把暂存区的所有修改提交到分支**</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">"understand how stage works"</span>[master e43a48b] understand how stage works 2 files changed, 2 insertions(+) create mode 100644 LICENSE</span></span><br></pre></td></tr></tbody></table></figure><p>一旦提交后，如果你又没有对工作区做任何修改，那么工作区就是 “干净” 的：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git statusOn branch masternothing to commit, working tree clean</span></span><br></pre></td></tr></tbody></table></figure><p>现在版本库变成了这样，暂存区就没有任何内容了</p><p><img src="http://targzp-picture.oss-cn-beijing.aliyuncs.com/img/image-20210201132212200.png" alt="image-20210201132212200"></p><br><h4 id="管理修改"><a href="#管理修改" class="headerlink" title="管理修改"></a>管理修改</h4><p>1、Git 跟踪并管理的是 ==<strong>修改</strong>==，而非文件</p><br><p>2、为什么说 Git 管理的是修改，而不是文件呢？我们还是做一个实验。第一步，对 <code>readme.txt</code> 做一个修改，比如加一行内容：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Git is a distributed version control system.Git is free software distributed under the GPL.Git has a mutable index called stage.Git tracks changes.</span><br></pre></td></tr></tbody></table></figure><p>然后，添加到暂存区：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git add readme.txt$ git status<span class="comment"># On branch master# Changes to be committed:#   (use "git reset HEAD &lt;file&gt;..." to unstage)##       modified:   readme.txt#</span></span></span><br></pre></td></tr></tbody></table></figure><p>然后，再修改 <code>readme.txt</code>:</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Git is a distributed version control system.Git is free software distributed under the GPL.Git has a mutable index called stage.Git tracks changes of files.</span><br></pre></td></tr></tbody></table></figure><p>提交暂存区中的修改：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">"git tracks changes"</span>[master 519219b] git tracks changes 1 file changed, 1 insertion(+)</span></span><br></pre></td></tr></tbody></table></figure><p>提交后，再看看状态：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git status$ git statusOn branch masterChanges not staged <span class="keyword">for</span> commit:  (use <span class="string">"git add &lt;file&gt;..."</span> to update what will be committed)  (use <span class="string">"git checkout -- &lt;file&gt;..."</span> to discard changes <span class="keyword">in</span> working directory)modified:   readme.txtno changes added to commit (use <span class="string">"git add"</span> and/or <span class="string">"git commit -a"</span>)</span></span><br></pre></td></tr></tbody></table></figure><br><p> 3、我们回顾一下操作过程：</p><p><strong>第一次修改 -&gt; <code>git add</code> -&gt; 第二次修改 -&gt; <code>git commit</code></strong></p><p>Git 管理的是修改，当你用 <code>git add</code> 命令后，在工作区的第一次修改被放入暂存区，准备提交，<strong>但是，在工作区的第二次修改并没有放入暂存区，所以，<code>git commit</code> 只负责把暂存区的修改提交了，也就是第一次的修改被提交了，第二次的修改并不会被提交</strong></p><br><p>4、提交后，用 <strong><code>git diff HEAD -- readme.txt</code></strong> 命令可以<strong>查看工作区和版本库里面最新版本的区别</strong></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git diff HEAD -- readme.txtdiff --git a/readme.txt b/readme.txtindex 76d770f..a9c5755 100644--- a/readme.txt+++ b/readme.txt@@ -1,4 +1,4 @@ Git is a distributed version control system. Git is free software distributed under the GPL. Git has a mutable index called stage.-Git tracks changes.+Git tracks changes of files.</span></span><br></pre></td></tr></tbody></table></figure><p>可见，第二次修改确实没有被提交</p><br><p>5、那么怎么提交第二次修改呢？你可以继续 <code>git add</code> 再 <code>git commit</code> ，也可以别着急提交第一次修改，先 <code>git add</code> 第二次修改，再 <code>git commit</code> ，就相当于 ==<strong>把两次修改合并后一块提交了</strong>==</p><br><h4 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h4><p>1、如果你在 <code>readme.txt</code> 中添加了一行，但是发现不该添加这一行。这时候可以很容易地去纠正它，你可以删掉最后一行，手动把文件恢复到上一个版本的状态。如果用 <code>git status</code> 查看一下：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git statusOn branch masterChanges not staged <span class="keyword">for</span> commit:  (use <span class="string">"git add &lt;file&gt;..."</span> to update what will be committed)  (use <span class="string">"git restore &lt;file&gt;..."</span> to discard changes <span class="keyword">in</span> working directory)        modified:   readme.txtUntracked files:  (use <span class="string">"git add &lt;file&gt;..."</span> to include <span class="keyword">in</span> what will be committed)        blog/        desktop.inino changes added to commit (use <span class="string">"git add"</span> and/or <span class="string">"git commit -a"</span>)</span></span><br></pre></td></tr></tbody></table></figure><p>你可以发现，Git 会告诉你，==<strong><code>git restore &lt;file&gt;</code> 可以丢弃工作区的修改</strong>== </p><br><p>2、命令 <code>git restore readme.txt</code> 意思就是，把 <code>readme.txt</code> 文件在工作区的修改全部撤销，这里有两种情况：</p><ul><li>一种是 <code>readme.txt</code> ==<strong>自修改后还没有被放到暂存区</strong>==，现在，<strong>撤销修改就回到和版本库一模一样的状态</strong></li><li>一种是 <code>readme.txt</code> ==<strong>已经添加到暂存区后，又作了修改</strong>==，现在，<strong>撤销修改就回到添加到暂存区后的状态</strong></li></ul><p>总之，<strong>就是让这个文件回到最近一次 <code>git commit</code> 或 <code>git add</code> 时的状态</strong></p><br><p>3、现在，看看 <code>readme.txt</code> 的文件内容：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat readme.txtGit is a distributed version control system.Git is free software distributed under the GPL.Git has a mutable index called stage.</span></span><br></pre></td></tr></tbody></table></figure><p>文件内容果然复原了</p><br><p>4、如果该错误已经 <code>git add</code> 到暂存区了，还没有提交</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git statusOn branch masterChanges to be committed:  (use <span class="string">"git restore --staged &lt;file&gt;..."</span> to unstage)        modified:   readme.txtUntracked files:  (use <span class="string">"git add &lt;file&gt;..."</span> to include <span class="keyword">in</span> what will be committed)        blog/        desktop.ini</span></span><br></pre></td></tr></tbody></table></figure><p>Git 同样告诉我们，==<strong>用命令 <code>git restore --staged &lt;file&gt;</code> 可以把暂存区的修改撤销掉</strong>==</p><br><p>5、再用 <code>git status</code> 查看一下，现在暂存区是干净的，工作区有修改</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git statusOn branch masterChanges not staged <span class="keyword">for</span> commit:  (use <span class="string">"git add &lt;file&gt;..."</span> to update what will be committed)  (use <span class="string">"git restore &lt;file&gt;..."</span> to discard changes <span class="keyword">in</span> working directory)        modified:   readme.txtUntracked files:  (use <span class="string">"git add &lt;file&gt;..."</span> to include <span class="keyword">in</span> what will be committed)        blog/        desktop.inino changes added to commit (use <span class="string">"git add"</span> and/or <span class="string">"git commit -a"</span>)</span></span><br></pre></td></tr></tbody></table></figure><p>再用 <code>git restore &lt;file&gt;</code>  撤销工作区的修改</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">git restore readme.txt</span></span><br></pre></td></tr></tbody></table></figure><br><h4 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h4><p>1、==<strong>rm 命令</strong>==（与手动删除工作区文件一样）。作用：删除工作区的文件</p><br><p>2、执行删除命令：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> rm test.txt</span></span><br></pre></td></tr></tbody></table></figure><p>查看状态（成功删除工作区文件）：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git statusOn branch masterChanges not staged <span class="keyword">for</span> commit:  (use <span class="string">"git add/rm &lt;file&gt;..."</span> to update what will be committed)  (use <span class="string">"git restore &lt;file&gt;..."</span> to discard changes <span class="keyword">in</span> working directory)        deleted:    test.txtUntracked files:  (use <span class="string">"git add &lt;file&gt;..."</span> to include <span class="keyword">in</span> what will be committed)        blog/        desktop.inino changes added to commit (use <span class="string">"git add"</span> and/or <span class="string">"git commit -a"</span>)</span></span><br></pre></td></tr></tbody></table></figure><p>==<strong>rm 命令只是删除工作区的文件，并没有删除版本库的文件</strong>==。想要删除版本文件还要执行下面的命令：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git add test.txt$ git commit -m <span class="string">"delete test"</span></span></span><br></pre></td></tr></tbody></table></figure><p>这样就删除了工作区和版本库的文件（相当于提交了该文件的删除版本）</p><br><p>3、==<strong>git rm 命令</strong>== ，作用：<strong>删除工作区文件，并且将这次删除放入暂存区</strong>。注意：<strong>要删除的文件是没有修改过的，就是说和当前版本库文件内容相同</strong></p><br><p>4、执行删除命令：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git rm test.txtrm <span class="string">'test.txt'</span></span></span><br></pre></td></tr></tbody></table></figure><p>查看状态（成功删除了工作区文件，并且将这次删除放入暂存区）：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git statusOn branch masterChanges to be committed:  (use <span class="string">"git restore --staged &lt;file&gt;..."</span> to unstage)        deleted:    test.txtUntracked files:  (use <span class="string">"git add &lt;file&gt;..."</span> to include <span class="keyword">in</span> what will be committed)        blog/        desktop.ini</span></span><br></pre></td></tr></tbody></table></figure><p>然后提交：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">"delete test.txt"</span>[master 0557e7e] delete test.txt 1 file changed, 0 insertions(+), 0 deletions(-) delete mode 100644 test.txt</span></span><br></pre></td></tr></tbody></table></figure><p>成功删除了版本库文件</p><br><p>5、删除了工作区和版本库的文件，<strong>因为暂存区不可能有该文件（如果有意味着该文件修改 <code>git add</code> 到暂存区，那样 <code>git rm</code> 命令会报错）</strong></p><br><p>6、==<strong>git rm -f 命令</strong>== ，作用：<strong>删除工作区和在暂存区文件，并且将这次删除放入暂存区</strong>。注意：<strong>要删除的文件已经修改过，就是说和当前版本库文件的内容不同</strong>（但是如果返回之前提交该文件的版本，那么删除之前修改的内容将丢失）</p><br><p>7、test 文件修改过 <strong>还没 <code>git add</code> 到暂存区</strong></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git rm test.txterror: the following file has <span class="built_in">local</span> modifications:    test.txt(use --cached to keep the file, or -f to force removal)</span></span><br></pre></td></tr></tbody></table></figure><p>test 文件修改过 <strong>已经 <code>git add</code> 到暂存区</strong></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git rm test.txterror: the following file has changes staged <span class="keyword">in</span> the index:    test.txt(use --cached to keep the file, or -f to force removal)</span></span><br></pre></td></tr></tbody></table></figure><p><strong>可见文件删除后不管有没有 <code>git add</code> 到暂存区，使用 <code>git rm</code> 命令都会报错</strong></p><br><p>8、解决方法：</p><p>执行删除命令：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git rm -f test.txtrm <span class="string">'test.txt'</span></span></span><br></pre></td></tr></tbody></table></figure><p>查看状态（成功删除工作区和暂存区文件，并且将这次删除放入暂存区）</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git statusOn branch masterChanges to be committed:  (use <span class="string">"git restore --staged &lt;file&gt;..."</span> to unstage)        deleted:    test.txtUntracked files:  (use <span class="string">"git add &lt;file&gt;..."</span> to include <span class="keyword">in</span> what will be committed)        blog/        desktop.ini</span></span><br></pre></td></tr></tbody></table></figure><p>然后提交：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">"delete test"</span>[master ec9e16e] delete test.txt 1 file changed, 0 insertions(+), 0 deletions(-) delete mode 100644 test.txt</span></span><br></pre></td></tr></tbody></table></figure><p>成功删除了版本库文件</p><br><p>9、==<strong>git rm –cached 命令</strong>== ，作用：<strong>删除暂存区文件，但保留工作区的文件，并且将这次删除放入暂存区</strong></p><br><p>10、执行删除命令：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git rm --cached test.txtrm <span class="string">'test.txt'</span></span></span><br></pre></td></tr></tbody></table></figure><p>查看状态（成功删除暂存区文件，保留工作区文件，并且将这次删除放入暂存区，<strong>注意这里文件取消了跟踪</strong>）</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git statusOn branch masterChanges to be committed:  (use <span class="string">"git reset HEAD &lt;file&gt;..."</span> to unstage)        deleted:    test.txtUntracked files:  (use <span class="string">"git add &lt;file&gt;..."</span> to include <span class="keyword">in</span> what will be committed)        test.txt</span></span><br></pre></td></tr></tbody></table></figure><p>然后提交：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">"delete test.txt"</span>[master 7bcb208] delete test.txt 1 file changed, 0 insertions(+), 0 deletions(-) delete mode 100644 test.txt</span></span><br></pre></td></tr></tbody></table></figure><br><p>11、<span class="github-emoji"><span>⭐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><strong>删除了暂存区和版本库的文件，但保留了工作区的文件</strong>。如果文件有修改并 <code>git add</code> 到暂存区，再执行 <code>git rm --cached</code> 和 <code>git commit</code> ，<strong>那么保留的工作区文件是修改后的文件，同时暂存区的修改文件和版本库的文件也被删除了</strong></p><hr><br><br><h1 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h1><p>1、<strong>GitHub 网站是提供 Git 仓库托管服务的</strong>，所以，只要注册一个 GitHub 账号，就可以免费获得 Git 远程仓库</p><br><p>2、第一步当然是注册 GitHub 账号。由于本地 Git 仓库和 GitHub 仓库之间的传输是通过 SSH 加密的，所以，需要一点设置：</p><ul><li><p>第一步：==<strong>创建 SSH Key</strong>== 。在用户主目录下，看看有没有 .ssh 目录，如果有，再看看这个目录下有没有 <code>id_rsa</code> 和 <code>id_rsa.pub</code> 这两个文件（ 如下图 ）</p><p><img src="http://targzp-picture.oss-cn-beijing.aliyuncs.com/img/image-20210207143647821.png" alt="image-20210207143647821"></p><p>如果已经有了，可直接跳到下一步。如果没有，打开 Shell，<strong>创建 SSH key</strong>：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C "youremail@example.com"</span><br></pre></td></tr></tbody></table></figure><p><strong>需要把邮件地址换成你自己的邮件i地址，然后一路回车，使用默认值即可</strong></p><p>如果一切顺利的话，<strong>可以在用户主目录里找到 <code>.ssh</code> 目录，里面有 <code>id_rsa</code> 和 <code>id_rsa.pub</code> 两个文件</strong>，这两个就是 SSH Key 的密钥对，<code>id_rsa</code> 是私钥，不能泄露出去，<code>id_rsa.pub</code> 是公钥，可以放心地告诉任何人</p></li><li><p>第二步：<strong>登录 GitHub，打开 “Settings” - “SSH and GPG keys” 页面</strong></p><img src="http://targzp-picture.oss-cn-beijing.aliyuncs.com/img/image-20210207150634863.png" alt="image-20210207150634863" style="zoom: 200%;"><p>然后点 “New SSH key”，填上任意 Title，在 Key 文本框里粘贴 <code>id_rsa.pub</code> 文件的内容</p><p><img src="http://targzp-picture.oss-cn-beijing.aliyuncs.com/img/image-20210207150828815.png" alt="image-20210207150828815"></p><p>点击 “Add SSH key” ，就应该看到已经添加的 key</p></li></ul><br><p>3、为什么GitHub需要SSH Key呢？==<strong>因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的</strong>==，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送</p><br><p>4、当然，==<strong>GitHub允许你添加多个Key</strong>==。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。现在我就已经添加了两台电脑的 Key，这两台电脑都可以往 GitHub 推送</p><p><img src="http://targzp-picture.oss-cn-beijing.aliyuncs.com/img/image-20210207151228610.png" alt="image-20210207151228610"></p><br><h4 id="添加远程库"><a href="#添加远程库" class="headerlink" title="添加远程库"></a>添加远程库</h4><p>1、现在的情景是，<strong>你已经在本地创建了一个 Git 仓库后，又想在 GitHub 创建一个 Git 仓库，并且让这两个仓库进行远程同步</strong>，这样，GitHub 上的仓库既可以作为备份，又可以让其他人通过该仓库来协作</p><br><p>2、首先，登录 GitHub，然后，在右上角找到 <strong>“New repository” 按钮，创建一个新的仓库</strong>：</p><p><img src="http://targzp-picture.oss-cn-beijing.aliyuncs.com/img/image-20210208125141584.png" alt="image-20210208125141584"></p><p>在 Repository name 填入 learngit，其他保持默认设置，<strong>点击下方 “Create repository” 按钮，就成功地创建了一个新的 Git 仓库</strong></p><img src="http://targzp-picture.oss-cn-beijing.aliyuncs.com/img/image-20210208125328827.png" alt="image-20210208125328827" style="zoom:67%;"><p><img src="http://targzp-picture.oss-cn-beijing.aliyuncs.com/img/image-20210208125602653.png" alt="image-20210208125602653"></p><p>目前，在 GitHub 上的这个 learngit 仓库还是空的，GitHub 告诉我们，可以从这个仓库克隆出新的仓库，<strong>也可以把一个已有的本地仓库与之关联，然后把本地仓库的内容推送到 GitHub 仓库</strong></p><br><p>3、现在，我们根据 GitHub 的提示，在本地的 learngit 仓库下运行命令：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git remote add origin git@github.com:Targzp/temp.git</span></span><br></pre></td></tr></tbody></table></figure><p>请千万注意，把上面的 <code>Targzp</code> 替换成自己的 GitHub 账户名，否则，你在本地关联的就是我的远程库，==<strong>关联没有问题，但是你以后推送是推不上去的，因为你的 SSH key 公钥不在我的账户列表中</strong>== </p><br><p>4、添加后，==**远程库的名字就是 <code>origin</code> **==，这是 Git 默认的叫法，也可以改成别的，但是 <code>origin</code> 这个名字一看就知道是远程库</p><br><p>5、下一步，就可以把本地库的所有内容推送到远程库上：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git push -u origin masterCounting objects: 20, done.Delta compression using up to 4 threads.Compressing objects: 100% (15/15), done.Writing objects: 100% (20/20), 1.64 KiB | 560.00 KiB/s, done.Total 20 (delta 5), reused 0 (delta 0)remote: Resolving deltas: 100% (5/5), done.To github.com:michaelliao/learngit.git * [new branch]      master -&gt; masterBranch <span class="string">'master'</span> <span class="built_in">set</span> up to track remote branch <span class="string">'master'</span> from <span class="string">'origin'</span>.</span></span><br></pre></td></tr></tbody></table></figure><p>把本地库的内容推送到远程，用 ==<strong>git push 命令</strong>==，<strong>实际上是把当前分支 <code>master</code> 推送到远程</strong></p><br><p>6、由于远程库是空的，我们第一次推送 <code>master</code> 分支时，加上了 <code>-u</code> 参数，<strong>Git 不但会把本地的 <code>master</code> 分支内容推送到远程库中新的 <code>master</code> 分支，还会把本地的 <code>master</code> 分支和远程的 <code>master</code> 分支关联起来，在以后的推送或者拉取时就可以简化命令</strong></p><br><p>7、推送成功后，可以立刻在 GitHub 页面中看到远程库的内容已经和本地一模一样：</p><p><img src="http://targzp-picture.oss-cn-beijing.aliyuncs.com/img/image-20210208131545023.png" alt="image-20210208131545023"></p><br><p>8、从现在起，只要本地作了提交，就可以通过命令：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">git push origin master</span></span><br></pre></td></tr></tbody></table></figure><p>==<strong>把本地 <code>master</code> 分支的最新修改推送至 GitHub</strong>==</p><br><h4 id="从远程库克隆"><a href="#从远程库克隆" class="headerlink" title="从远程库克隆"></a>从远程库克隆</h4><p>1、之前我们讲了先有本地库，后有远程库的时候，如何关联远程库。现在，假设我们从零开发，那么最好的方式==<strong>先创建远程库，然后，从远程库克隆</strong>==</p><br><p>2、首先，登录 GitHub，创建一个新的仓库，名字叫 <code>gitskills</code></p><p><img src="http://targzp-picture.oss-cn-beijing.aliyuncs.com/img/image-20210208132526411.png" alt="image-20210208132526411"></p><p>我们勾选 <strong><code>Initialize this repository with a README</code></strong> ，这样 GitHub 会自动为我们创建一个 <code>README.md</code> 文件。创建完毕后，可以看到 <code>README.md</code> 文件：</p><p><img src="http://targzp-picture.oss-cn-beijing.aliyuncs.com/img/image-20210208132805476.png" alt="image-20210208132805476"></p><br><p>3、现在，远程库已经准备好了，下一步是用 ==**<code>git clone</code> **== <strong>克隆一个本地库</strong>：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> git@github.com:Targzp/gitskills.gitCloning into <span class="string">'gitskills'</span>...remote: Counting objects: 3, done.remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 3Receiving objects: 100% (3/3), <span class="keyword">done</span>.</span></span><br></pre></td></tr></tbody></table></figure><p>注意，把 Git 仓库的地址换成你的，然后进入 <code>gitskills</code> 目录看看，已经有 <code>README.md</code> 文件了</p><br><p>4、如果有多个人协作开发，<strong>那么每个人各自从远程克隆一份就可以了</strong></p><br><p>5、你也许还注意到，<strong>GitHub给出的地址不止一个</strong>，还可以用<code>https://github.com/michaelliao/gitskills.git</code>这样的地址。实际上，Git支持多种协议，默认的<code>git://</code>使用ssh，但也可以使用<code>https</code>等其他协议。</p><hr><br><br><h1 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h1><h4 id="创建与合并分支"><a href="#创建与合并分支" class="headerlink" title="创建与合并分支"></a>创建与合并分支</h4><p>1、在版本回退里，你已经知道，每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，==<strong>这个分支叫主分支，即<code>master</code>分支</strong>==。<code>HEAD</code>严格来说不是指向提交，而是指向<code>master</code>，<code>master</code>才是指向提交的，所以，==<strong><code>HEAD</code>指向的就是当前分支</strong>==</p><br><p>2、一开始的时候，<code>master</code> 分支是一条线，Git 用 <code>master</code> 指向最新的提交，再用 <code>HEAD</code> 指向 <code>master</code> ，<strong>就能确定当前分支，以及当前分支的提交点</strong></p><p><img src="http://targzp-picture.oss-cn-beijing.aliyuncs.com/img/image-20210216130614396.png" alt="image-20210216130614396"></p><p>每次提交，<code>master</code> 分支都会向前移动一步，这样，随着你不断提交，<code>master</code> 分支的线也越来越长</p><br><p>3、当我们创建新的分支，例如 <code>dev</code> 时，<strong>GIt 新建了一个指针叫 <code>dev</code>，指向 <code>master</code> 相同的提交，再把 <code>HEAD</code> 指定 <code>dev</code> ，就表示当前分支在 <code>dev</code> 上</strong>：</p><p><img src="http://targzp-picture.oss-cn-beijing.aliyuncs.com/img/image-20210216131232665.png" alt="image-20210216131232665"></p><br><p>4、从现在开始，==<strong>对工作区的修改和提交就是针对 <code>dev</code> 分支了，比如新提交一次后，<code>dev</code>指针往前移动一步，而<code>master</code> 指针不变</strong>==：</p><p><img src="http://targzp-picture.oss-cn-beijing.aliyuncs.com/img/image-20210216131444262.png" alt="image-20210216131444262"></p><br><p>5、假如我们在<code>dev</code>上的工作完成了，就可以把<code>dev</code>合并到<code>master</code>上。Git怎么合并呢？最简单的方法，<strong>就是直接把<code>master</code>指向<code>dev</code>的当前提交，就完成了合并</strong>：</p><p><img src="http://targzp-picture.oss-cn-beijing.aliyuncs.com/img/image-20210216131754862.png" alt="image-20210216131754862"></p><br><p>6、<strong>合并完分支后，甚至可以删除<code>dev</code>分支</strong>。删除<code>dev</code>分支就是把<code>dev</code>指针给删掉，删掉后，我们就剩下了一条<code>master</code>分支：</p><p><img src="http://targzp-picture.oss-cn-beijing.aliyuncs.com/img/image-20210216131828550.png" alt="image-20210216131828550"></p><br><p>7、首先，创建 <code>dev</code> 分支，然后切换到 <code>dev</code> 分支</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git checkout -b devSwitched to a new branch <span class="string">'dev'</span></span></span><br></pre></td></tr></tbody></table></figure><p>==<strong><code>git checkout</code> 命令加上 <code>-b</code> 参数</strong>== <strong>表示创建并切换</strong>，相当于一下两条命令：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git branch dev$ git checkout devSwitched to branch <span class="string">'dev'</span></span></span><br></pre></td></tr></tbody></table></figure><p>然后，用 ==<strong><code>git branch</code> 命令</strong>== <strong>查看当前分支</strong></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git branch*dev master</span></span><br></pre></td></tr></tbody></table></figure><p><code>git branch</code> 命令会列出所有分支，当前分支前面会标一个 * 号</p><br><p>8、然后，我们就可以在 <code>dev</code> 分支上正常提交，比如对 <code>readme.txt</code> 做个修改，加上一行：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Creating a new branch is quick</span><br></pre></td></tr></tbody></table></figure><p>然后提交：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git add readme.txt$ git commit -m <span class="string">"branch test"</span>[dev b17d20e] branch <span class="built_in">test</span> 1 file changed, 1 insertion(+)</span></span><br></pre></td></tr></tbody></table></figure><br><p>9、现在，<code>dev</code> 分支的工作完成，我们就可以切换回 <code>master</code> 分支：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git checkout masterSwitched to branch <span class="string">'master'</span></span></span><br></pre></td></tr></tbody></table></figure><p>切换回<code>master</code>分支后，再查看一个<code>readme.txt</code>文件，刚才添加的内容不见了！==<strong>因为那个提交是在<code>dev</code>分支上，而<code>master</code>分支此刻的提交点并没有变</strong>==：</p><p><img src="http://targzp-picture.oss-cn-beijing.aliyuncs.com/img/image-20210216143002562.png" alt="image-20210216143002562"></p><p>现在，我们把 <code>dev</code> 分支的工作成果合并到 <code>master</code> 分支上：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git merge devUpdating d46f35e..b17d20eFast-forward readme.txt | 1 + 1 file changed, 1 insertion(+)</span></span><br></pre></td></tr></tbody></table></figure><p>==<strong>git merge</strong>== 命令<strong>用于合并指定分支到当前分支</strong>。合并后，再查看<code>readme.txt</code>的内容，就可以看到，和<code>dev</code>分支的最新提交是完全一样的</p><br><p>10、注意到上面的<code>Fast-forward</code>信息，Git告诉我们，这次合并是“快进模式”，==<strong>也就是直接把<code>master</code>指向<code>dev</code>的当前提交</strong>==，所以合并速度非常快。</p><br><p>11、合并完成后，就可以放心地删除 <code>dev</code> 分支了：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git branch -d devDeleted branch dev (was b17d20e).</span></span><br></pre></td></tr></tbody></table></figure><p>删除后，查看 <code>branch</code> ，就只剩下 <code>master</code> 分支了：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git branch*master</span></span><br></pre></td></tr></tbody></table></figure><br><p>12、实际上，切换分支这个动作，用<code>switch</code>更科学。因此，最新版本的Git提供了新的==<strong><code>git switch</code>命令</strong>==<strong>来切换分支</strong>：</p><ul><li><p>创建并切换到新的 <code>dev</code> 分支，可以使用：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git switch -c dev</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>直接切换到已有的 <code>master</code> 分支，可以使用：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git switch master</span></span><br></pre></td></tr></tbody></table></figure></li></ul><p>使用新的<code>git switch</code>命令，比<code>git checkout</code>要更容易理解。</p><br><h4 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h4><p>1、准备新的 <code>feature1</code> 分支，继续我们的新分支开发</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git switch -c feature1Switched to a new branch <span class="string">'feature1'</span></span></span><br></pre></td></tr></tbody></table></figure><p>修改 <code>readme.txt</code>  最后一行，改为：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Creating a new branch is quick AND simple</span><br></pre></td></tr></tbody></table></figure><p>在 <code>feature1</code> 分支上提交：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git add readme.txt$ git commit -m <span class="string">"AND simple"</span>[feature1 14096d0] AND simple 1 file changed, 1 insertion(+), 1 deletion(-)</span></span><br></pre></td></tr></tbody></table></figure><br><p>2、切换到 <code>master</code> 分支</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git switch masterSwitched to branch <span class="string">'master'</span>Your branch is ahead of <span class="string">'origin/master'</span> by 1 commit.  (use <span class="string">"git push"</span> to publish your <span class="built_in">local</span> commits)</span></span><br></pre></td></tr></tbody></table></figure><p>Git 还会自动提示我们当前 <code>master</code> 分支比远程的 <code>master</code> 分支要超前 1 个提交</p><p>在 <code>master</code> 分支上把 <code>reademe.txt</code> 文件的最后一行改为：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Creating a new branch is quick &amp; simple</span><br></pre></td></tr></tbody></table></figure><p>提交：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git add readme.txt$ git commit -m <span class="string">"&amp; simple"</span>[master 5dc6824] &amp; simple 1 file changed, 1 insertion(+), 1 deletion(-)</span></span><br></pre></td></tr></tbody></table></figure><br><p>3、现在 ，<code>master</code> 分支和 <code>feature1</code> 分支各自都分别有新的提交，变成了这样：</p><p><img src="http://targzp-picture.oss-cn-beijing.aliyuncs.com/img/image-20210217131612800.png" alt="image-20210217131612800"></p><p>这种情况下，GIt 无法执行 “快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突，我们试试看：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git merge feature1Auto-merging readme.txtCONFLICT (content): Merge conflict <span class="keyword">in</span> readme.txtAutomatic merge failed; fix conflicts and <span class="keyword">then</span> commit the result.</span></span><br></pre></td></tr></tbody></table></figure><p>果然冲突了，Git 告诉我们，**<code>readme.txt</code> 文件存在冲突，必须手动解决冲突后再提交**。<code>git status</code> 也可以告诉我们冲突的文件：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git statusOn branch masterYour branch is ahead of <span class="string">'origin/master'</span> by 2 commits.  (use <span class="string">"git push"</span> to publish your <span class="built_in">local</span> commits)You have unmerged paths.  (fix conflicts and run <span class="string">"git commit"</span>)  (use <span class="string">"git merge --abort"</span> to abort the merge)Unmerged paths:  (use <span class="string">"git add &lt;file&gt;..."</span> to mark resolution)both modified:   readme.txtno changes added to commit (use <span class="string">"git add"</span> and/or <span class="string">"git commit -a"</span>)</span></span><br></pre></td></tr></tbody></table></figure><p>我们可以查看 <code>readme.txt</code> 的内容：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Git is a distributed version control system.Git is free software distributed under the GPL.Git has a mutable index called stage.Git tracks changes of files.&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEADCreating a new branch is quick &amp; simple.=======Creating a new branch is quick AND simple.&gt;&gt;&gt;&gt;&gt;&gt;&gt; feature1</span><br></pre></td></tr></tbody></table></figure><p>Git用<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>，<code>=======</code>，<code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>标记出不同分支的内容，我们修改如下后保存</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Creating a new branch is quick and simple.</span><br></pre></td></tr></tbody></table></figure><p>再提交：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git add readme.txt$ git commit -m <span class="string">"conflict fixed"</span>[master cf810e4] conflict fixed</span></span><br></pre></td></tr></tbody></table></figure><p>现在，<code>master </code>分支 和 <code>feature1</code> 分支变成了下图所示：</p><p><img src="http://targzp-picture.oss-cn-beijing.aliyuncs.com/img/image-20210217132143214.png" alt="image-20210217132143214"></p><p>用带参数的 ==<strong><code>git log</code></strong>==<strong>也可以看到分支的合并情况</strong>：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> --graph --pretty=oneline --abbrev-commit*   cf810e4 (HEAD -&gt; master) conflict fixed|\  | * 14096d0 (feature1) AND simple* | 5dc6824 &amp; simple|/  * b17d20e branch <span class="built_in">test</span>* d46f35e (origin/master) remove test.txt* b84166e add test.txt* 519219b git tracks changes* e43a48b understand how stage works* 1094adb append GPL* e475afc add distributed* eaadf4e wrote a readme file</span></span><br></pre></td></tr></tbody></table></figure><p>最后，删除 <code>feature1</code> 分支：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git branch -d feature1Deleted branch feature1 (was 14096d0).</span></span><br></pre></td></tr></tbody></table></figure><br><h4 id="分支管理策略"><a href="#分支管理策略" class="headerlink" title="分支管理策略"></a>分支管理策略</h4><p>1、通常，合并分支时，如果可能，Git会用<code>Fast forward</code>模式，但这种模式下，删除分支后，会丢掉分支信息</p><br><p>2、如果要强制禁用<code>Fast forward</code>模式，Git就会在merge时<strong>生成一个新的commit</strong>，这样，==<strong>从分支历史上就可以看出分支信息</strong>==</p><br><p>3、下面我们实战一下 ==<strong><code>--no-ff</code>方式</strong>== 的 <code>git merge</code>：</p><p>首先，仍然创建并切换 <code>dev</code> 分支：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git switch -c devSwitched to a new branch <span class="string">'dev'</span></span></span><br></pre></td></tr></tbody></table></figure><p>修改 readme.txt 文件，并提交一个新的 commit：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git add readme.txt$ git commit -m <span class="string">"add merge"</span>[dev f52c633] add merge 1 file changed, 1 insertion(+)</span></span><br></pre></td></tr></tbody></table></figure><p>现在，我们切换回 <code>master</code>：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git switch masterSwitched to branch <span class="string">'master'</span></span></span><br></pre></td></tr></tbody></table></figure><p>准备合并<code>dev</code>分支，请注意<code>--no-ff</code>参数，==<strong>表示禁用<code>Fast forward</code></strong>==：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git merge --no-ff -m <span class="string">"merge with no-ff"</span> devMerge made by the <span class="string">'recursive'</span> strategy. readme.txt | 1 + 1 file changed, 1 insertion(+)</span></span><br></pre></td></tr></tbody></table></figure><p>因为本次合并要创建一个新的commit，所以加上<code>-m</code>参数，把commit描述写进去</p><br><p>4、合并后，我们用 <code>git log</code> 看看分支历史</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> --graph --pretty=oneline --abbrev-commit*   e1e9c68 (HEAD -&gt; master) merge with no-ff|\  | * f52c633 (dev) add merge|/  *   cf810e4 conflict fixed...</span></span><br></pre></td></tr></tbody></table></figure><p>可以看到，不使用 <code>Fast forward</code> 模式，merge 后就像这样：</p><p><img src="http://targzp-picture.oss-cn-beijing.aliyuncs.com/img/image-20210218150212489.png" alt="image-20210218150212489"></p><br><p>5、在实际开发中，我们应该按照几个基本原则进行分支管理：</p><ul><li><p>首先，**<code>master</code>分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活**</p></li><li><p>那在哪干活呢？干活都在<code>dev</code>分支上，也就是说，**<code>dev</code>分支是不稳定的，到某个时候，比如1.0版本发布时，再把<code>dev</code>分支合并到<code>master</code>上，在<code>master</code>分支发布1.0版本**</p></li><li><p>你和你的小伙伴们每个人都在<code>dev</code>分支上干活，每个人都有自己的分支，时不时地往<code>dev</code>分支上合并就可以了</p></li></ul><p>所以，团队合作的分支看起来就像这样：</p><p><img src="http://targzp-picture.oss-cn-beijing.aliyuncs.com/img/image-20210218150621966.png" alt="image-20210218150621966"></p><br><h4 id="Bug-分支"><a href="#Bug-分支" class="headerlink" title="Bug 分支"></a>Bug 分支</h4><p>1、软件开发中，bug就像家常便饭一样。有了bug就需要修复，在Git中，由于分支是如此的强大，<strong>所以，每个bug都可以通过一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除</strong></p><br><p>2、当你接到一个修复一个代号101的bug的任务时，很自然地，你想创建一个分支<code>issue-101</code>来修复它，但是，等等，当前正在<code>dev</code>上进行的工作还没有提交：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git statusOn branch devChanges to be committed:  (use <span class="string">"git reset HEAD &lt;file&gt;..."</span> to unstage)new file:   hello.pyChanges not staged <span class="keyword">for</span> commit:  (use <span class="string">"git add &lt;file&gt;..."</span> to update what will be committed)  (use <span class="string">"git checkout -- &lt;file&gt;..."</span> to discard changes <span class="keyword">in</span> working directory)modified:   readme.txt</span></span><br></pre></td></tr></tbody></table></figure><p>并不是你不想提交，而是工作只进行到一半，还没法提交，预计完成还需1天时间。但是，必须在两个小时内修复该bug，怎么办？</p><br><p>3、幸好，GIt 还提供了一个 ==<strong>stash 功能</strong>== ，<strong>可以把当前工作现场 “储存” 起来</strong>（即把当前分支所对应的工作区状态进行保存），等以后恢复现场后继续工作：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git stashSaved working directory and index state WIP on dev: f52c633 add merge</span></span><br></pre></td></tr></tbody></table></figure><br><p>4、首先确定要在哪个分支上修复 bug，假定需要在 <code>master</code> 分支上修复，就从 <code>master</code> 创建临时分支：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git switch masterSwitched to branch <span class="string">'master'</span>$ git switch -c issue-001Switched to a new branch <span class="string">'issue-101'</span></span></span><br></pre></td></tr></tbody></table></figure><p>现在修复bug，需要把“Git is free software …”改为“Git is a free software …”，然后提交：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git add readme.txt$ git commit -m <span class="string">"fix bug 101"</span>[issue-101 4c805e2] fix bug 101 1 file changed, 1 insertion(+), 1 deletion(-)</span></span><br></pre></td></tr></tbody></table></figure><p>修复完成后，切换到<code>master</code>分支，并完成合并，最后删除<code>issue-101</code>分支：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git switch masterSwitched to branch <span class="string">'master'</span>$ git merge --no-ff -m <span class="string">"merged bug fix 101"</span> issue-101Merge made by the <span class="string">'recursive'</span> strategy. readme.txt | 2 +- 1 file changed, 1 insertion(+), 1 deletion(-)</span></span><br></pre></td></tr></tbody></table></figure><br><p>5、现在，切回到 <code>dev</code> 分支：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git switch devSwitched to branch <span class="string">'dev'</span>$ git statusOn branch hcmnothing to commit, working tree clean</span></span><br></pre></td></tr></tbody></table></figure><p>工作区是干净的，刚才的工作现场存到哪去了？用 ==<strong><code>git stash list</code>命令</strong>==看看：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git stash liststash@{0}: WIP on dev: f52c633 add merge</span></span><br></pre></td></tr></tbody></table></figure><br><p>6、工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法：</p><ul><li><p>一是用 ==<strong><code>git stash apply</code></strong>== 恢复，但是恢复后，<strong>stash内容并不删除</strong>，你需要用 ==**<code>git stash drop</code> **==来删除；</p></li><li><p>另一种方式是用 ==<strong><code>git stash pop</code></strong>==，<strong>恢复的同时把stash内容也删了</strong>：</p></li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git stash popOn branch devChanges to be committed:  (use <span class="string">"git reset HEAD &lt;file&gt;..."</span> to unstage)new file:   hello.pyChanges not staged <span class="keyword">for</span> commit:  (use <span class="string">"git add &lt;file&gt;..."</span> to update what will be committed)  (use <span class="string">"git checkout -- &lt;file&gt;..."</span> to discard changes <span class="keyword">in</span> working directory)modified:   readme.txtDropped refs/stash@{0} (5d677e2ee266f39ea296182fb2354265b91b3b2a)</span></span><br></pre></td></tr></tbody></table></figure><p>再用 <code>git stash list</code> 查看，就看不到任何 stash 内容了：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git stash list</span></span><br></pre></td></tr></tbody></table></figure><p><strong>可以多次stash，恢复的时候，先用<code>git stash list</code>查看，然后恢复指定的stash</strong>，用命令：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git stash apply stash@{0}</span></span><br></pre></td></tr></tbody></table></figure><br><p>7、在master分支上修复了bug后，我们要想一想，<strong>dev分支是早期从master分支分出来的，所以，这个bug其实在当前dev分支上也存在</strong></p><br><p>8、同样的bug，要在dev上修复，我们只需要把<code>4c805e2 fix bug 101</code>这个提交<strong>所做的修改“复制”到dev分支</strong>。注意：我们只想复制<code>4c805e2 fix bug 101</code>这个提交所做的修改，并不是把整个master分支merge过来</p><br><p>9、为了方便操作，Git专门提供了一个 ==<strong><code>git cherry-pick</code>命令</strong>==，让我们<strong>能复制一个特定的提交到当前分支</strong>：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git branch* dev  master$ git cherry-pick 4c805e2[master 1d4b803] fix bug 101 1 file changed, 1 insertion(+), 1 deletion(-)</span></span><br></pre></td></tr></tbody></table></figure><p>Git自动给dev分支做了一次提交，注意这次提交的commit是<code>1d4b803</code>，它并不同于master的<code>4c805e2</code>，<strong>因为这两个commit只是改动相同，但确实是两个不同的commit</strong>。用<code>git cherry-pick</code>，我们就不需要在dev分支上手动再把修bug的过程重复一遍</p><br><h4 id="Feature-分支"><a href="#Feature-分支" class="headerlink" title="Feature 分支"></a>Feature 分支</h4><p>1、添加一个新功能时，你肯定不希望因为一些实验性质的代码，把主分支搞乱了，<strong>所以，每添加一个新功能，最好新建一个feature分支，在上面开发，完成后，合并，最后，删除该feature分支</strong></p><br><p>2、现在接到了一个新的开发任务，于是准备开发：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git switch -c feature-vulcanSwitched to a new branch <span class="string">'feature-vulcan'</span></span></span><br></pre></td></tr></tbody></table></figure><p>几分钟后，开发完毕：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git add vulcan.py$ git statusOn branch feature-vulcanChanges to be committed:  (use <span class="string">"git reset HEAD &lt;file&gt;..."</span> to unstage)new file:   vulcan.py$ git commit -m <span class="string">"add feature vulcan"</span>[feature-vulcan 287773e] add feature vulcan 1 file changed, 2 insertions(+) create mode 100644 vulcan.py</span></span><br></pre></td></tr></tbody></table></figure><p>切回 <code>dev</code>，准备合并：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git switch dev</span></span><br></pre></td></tr></tbody></table></figure><p>一切顺利的话，feature分支和bug分支是类似的，合并，然后删除</p><br><p>3、但是，此时根据上级说明新功能取消，显然这个分支必须得销毁：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git branch -d feature-vulcanerror: The branch <span class="string">'feature-vulcan'</span> is not fully merged.If you are sure you want to delete it, run <span class="string">'git branch -D feature-vulcan'</span>.</span></span><br></pre></td></tr></tbody></table></figure><p>销毁失败。GIt 友情提醒，==<strong>feature-vulcan 分支</strong>== 还没有被合并，如果删除，将丢失掉修改，<strong>如果要强行删除</strong>，==<strong>需要使用大写的 <code>-D</code> 参数</strong>== </p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git branch -D feature-vulcanDeleted branch feature-vulcan (was 287773e).</span></span><br></pre></td></tr></tbody></table></figure><br><h4 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h4><p>1、当你从远程仓库克隆时，<strong>实际上 GIt 自动把本地的 <code>master</code> 分支和远程的 <code>master</code> 分支对应起来了</strong>，并且，远程仓库的默认名称是 <code>origin</code></p><br><p>2、要<strong>查看远程库的信息</strong>，用 ==<strong><code>git remote</code></strong>==</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git remoteorigin</span></span><br></pre></td></tr></tbody></table></figure><p>或者，用 ==<strong><code>git remote -v</code></strong>== <strong>显示更详细的信息</strong>：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git remote -vorigin  git@github.com:michaelliao/learngit.git (fetch)origin  git@github.com:michaelliao/learngit.git (push)</span></span><br></pre></td></tr></tbody></table></figure><p>上面<strong>显示了可以抓取和推送的 <code>origin</code> 都地址</strong>。如果没有推送权限，就看不到 push 的地址</p><br><p>3、==<strong>推送分支</strong>==，就是指 <strong>把该分支上的所有本地提交推送到远程库</strong>。推送时，要制定本地分支，这样，Git 就会把该分支推送到远程库对应的远程分支上：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git push origin master</span></span><br></pre></td></tr></tbody></table></figure><p>如果要推送其他分支，比如 <code>dev</code> ，就改成：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git push origin dev</span></span><br></pre></td></tr></tbody></table></figure><br><p>4、但是，并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？</p><ul><li><strong><code>master</code> 分支是主分支，因此要时刻与远程同步</strong></li><li><strong><code>dev</code> 分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步</strong></li><li><code>bug</code> 分支只用于在本地修复 bug，就没必要推送到远程了</li><li><code>feature</code> 分支是否推到远程，取决于你是否和你的团队合作在上面开发</li></ul><br><p>5、==<strong>抓取分支</strong>==。多人协作时，<strong>大家都会往 <code>master</code> 和 <code>dev</code> 分支上推送各自的修改</strong>。现在，模拟一个同事，可以在另一台电脑或者同一台电脑的另一个目录下克隆：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> git@github.com:michaelliao/learngit.gitCloning into <span class="string">'learngit'</span>...remote: Counting objects: 40, done.remote: Compressing objects: 100% (21/21), done.remote: Total 40 (delta 14), reused 40 (delta 14), pack-reused 0Receiving objects: 100% (40/40), done.Resolving deltas: 100% (14/14), <span class="keyword">done</span>.</span></span><br></pre></td></tr></tbody></table></figure><p>当你的小伙伴从远程库 clone 时，==<strong>默认情况下，你的小伙伴只能看到本地的 <code>master</code> 分支</strong>==。不信可以用 <code>git branch</code> 命令查看：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git branch*master</span></span><br></pre></td></tr></tbody></table></figure><p>现在，你的小伙伴要在 <code>dev</code> 分支上开发，==<strong>就必须创建远程 <code>origin</code> 的 <code>dev</code> 分支到本地</strong>==，于是他用命令创建本地 <code>dev</code> 分支</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git switch -c dev origin/dev</span></span><br></pre></td></tr></tbody></table></figure><p>现在，他就可以在 <code>dev</code> 上继续修改，然后，时不时地==<strong>把 <code>dev</code> 分支 <code>push</code> 到远程</strong>==：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git add env.txt$ git commit -m <span class="string">"add env"</span>[dev 7a5e5dd] add env 1 file changed, 1 insertion(+) create mode 100644 env.txt$ git push origin devCounting objects: 3, done.Delta compression using up to 4 threads.Compressing objects: 100% (2/2), done.Writing objects: 100% (3/3), 308 bytes | 308.00 KiB/s, done.Total 3 (delta 0), reused 0 (delta 0)To github.com:michaelliao/learngit.git   f52c633..7a5e5dd  dev -&gt; dev</span></span><br></pre></td></tr></tbody></table></figure><br><p>6、你的同时已经向 <code>origin/dev</code> 分支推送了他的提交，而碰巧你也对同样的文件作了修改，并试图推送：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat env.txtenv$ git add env.txt$ git commit -m <span class="string">"add new env"</span>[dev 7bd91f1] add new env 1 file changed, 1 insertion(+) create mode 100644 env.txt$ git push origin devTo github.com:michaelliao/learngit.git ! [rejected]        dev -&gt; dev (non-fast-forward)error: failed to push some refs to <span class="string">'git@github.com:michaelliao/learngit.git'</span>hint: Updates were rejected because the tip of your current branch is behindhint: its remote counterpart. Integrate the remote changes (e.g.hint: <span class="string">'git pull ...'</span>) before pushing again.hint: See the <span class="string">'Note about fast-forwards'</span> <span class="keyword">in</span> <span class="string">'git push --help'</span> <span class="keyword">for</span> details.</span></span><br></pre></td></tr></tbody></table></figure><p>推送失败，因为<strong>你的同事的最新提交和你试图推送的提交有冲突</strong>，解决办法也很简单，Git已经提示我们，==<strong>先用<code>git pull</code>把最新的提交从<code>origin/dev</code>抓下来，然后，在本地合并，解决冲突，再推送</strong>==：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git pullThere is no tracking information <span class="keyword">for</span> the current branch.Please specify <span class="built_in">which</span> branch you want to merge with.See git-pull(1) <span class="keyword">for</span> details.    git pull &lt;remote&gt; &lt;branch&gt;If you wish to <span class="built_in">set</span> tracking information <span class="keyword">for</span> this branch you can <span class="keyword">do</span> so with:    git branch --set-upstream-to=origin/&lt;branch&gt; dev</span></span><br></pre></td></tr></tbody></table></figure><p><code>git pull</code> 也失败了，==<strong>原因是没有建立本地 <code>dev</code> 分支与远程 <code>origin/dev</code> 分支的关联</strong>==，根据提示，设置 <code>dev</code> 和 <code>origin/dev</code> 的关联：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git branch --set-upstream-to=origin/dev devBranch <span class="string">'dev'</span> <span class="built_in">set</span> up to track remote branch <span class="string">'dev'</span> from <span class="string">'origin'</span>.</span></span><br></pre></td></tr></tbody></table></figure><p>再 pull：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git pullAuto-merging env.txtCONFLICT (add/add): Merge conflict <span class="keyword">in</span> env.txtAutomatic merge failed; fix conflicts and <span class="keyword">then</span> commit the result.</span></span><br></pre></td></tr></tbody></table></figure><p>这回 <code>git pull</code> 成功，但是合并有冲突，需要手动解决，解决的方法和分支管理中解决冲突一样。解决后，提交，再 push：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">"fix env conflict"</span>[dev 57c53ab] fix env conflict$ git push origin devCounting objects: 6, done.Delta compression using up to 4 threads.Compressing objects: 100% (4/4), done.Writing objects: 100% (6/6), 621 bytes | 621.00 KiB/s, done.Total 6 (delta 0), reused 0 (delta 0)To github.com:michaelliao/learngit.git   7a5e5dd..57c53ab  dev -&gt; dev</span></span><br></pre></td></tr></tbody></table></figure><br><p>7、小结：</p><ul><li>查看远程库信息，使用<code>git remote -v</code></li><li>本地新建的分支如果不推送到远程，对其他人就是不可见的</li><li>从本地推送分支，使用<code>git push origin branch-name</code>，<strong>如果推送失败（即本地分支与远程分支并不同步）</strong>，那就要用<code>git pull</code>抓取远程的新提交</li><li>在本地创建和远程分支对应的分支，使用<code>git checkout -b branch-name origin/branch-name</code>，本地和远程分支的名称最好一致</li><li><span class="github-emoji"><span>⭐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <strong>建立本地分支和远程分支的关联，使用<code>git branch --set-upstream branch-name origin/branch-name</code></strong></li><li>从远程抓取分支，使用<code>git pull</code>，如果有冲突，要先处理冲突</li></ul><br><h4 id="Rebase"><a href="#Rebase" class="headerlink" title="Rebase"></a>Rebase</h4><p>1、要讲 ==<strong>Rebase</strong>== 那就得讲 Rabase 与 merge 的区别</p><br><p>2、现在我们模拟日常开发：</p><ul><li><p>第一个人执行 git log：</p><img src="http://targzp-picture.oss-cn-beijing.aliyuncs.com/img/image-20210224150114744.png" alt="image-20210224150114744" style="zoom:67%;"><p>可以看出此时该项目仅有一次提交记录</p><p>执行新增文件 a.txt ，并本地提交一次后再次执行 git log</p><img src="http://targzp-picture.oss-cn-beijing.aliyuncs.com/img/image-20210224150226587.png" alt="image-20210224150226587" style="zoom:67%;"><p>这时候打开 github，刷新该项目的 commit 记录</p><p><img src="http://targzp-picture.oss-cn-beijing.aliyuncs.com/img/image-20210224150331297.png" alt="image-20210224150331297"></p><p>发现远程仓库还是只有一次提交记录，说明第一个人还没有将自己最新的修改 push 到 远程仓库，其他人这个时候看不到第一个人的最新提交</p><p>第一个人将自己的最新提交 push 到远程仓库</p><img src="http://targzp-picture.oss-cn-beijing.aliyuncs.com/img/image-20210224150551899.png" alt="image-20210224150551899" style="zoom:67%;"><p>再次刷新 github 提交记录，发现已经多了一个第一个人提交的最新记录了</p><p><img src="http://targzp-picture.oss-cn-beijing.aliyuncs.com/img/image-20210224150637995.png" alt="image-20210224150637995"></p></li></ul><br><p>3、切分支开发：</p><ul><li><p>基于已有两次提交记录的本地 master 分支检出一个新分支 dev，并将该分支推送到远程仓库</p><img src="http://targzp-picture.oss-cn-beijing.aliyuncs.com/img/image-20210225125814024.png" alt="image-20210225125814024" style="zoom:67%;"></li><li><p>查看远程仓库，多了一个 dev 分支</p><img src="http://targzp-picture.oss-cn-beijing.aliyuncs.com/img/image-20210225125918670.png" alt="image-20210225125918670" style="zoom:67%;"></li><li><p>此时本地的 git 分支图类似如下：</p><img src="http://targzp-picture.oss-cn-beijing.aliyuncs.com/img/image-20210225130007342.png" alt="image-20210225130007342" style="zoom:67%;"></li></ul><br><p>3、假设 A 同事基于 dev 分支开发功能，在本地新做了三次代码提交，git log 如下：</p><img src="http://targzp-picture.oss-cn-beijing.aliyuncs.com/img/image-20210225130217164.png" alt="image-20210225130217164" style="zoom:67%;"><p>那么此时的 git 分支图如下：</p><p><img src="http://targzp-picture.oss-cn-beijing.aliyuncs.com/img/image-20210225131449850.png" alt="image-20210225131449850"></p><br><p>4、如果此时在 A 同事准备进行第四次本地提交之前，另一个同事 B 向远程仓库推送了一个 master 分支的提交，即此时 master 实际的提交已经向前走了。我们这个时候在 github 上操作一次 commit，模拟另一个同学此时 push 了 master 分支：</p><p><img src="http://targzp-picture.oss-cn-beijing.aliyuncs.com/img/image-20210225131716608.png" alt="image-20210225131716608"></p><p>A 同事本地更新了一下 master 分支</p><img src="http://targzp-picture.oss-cn-beijing.aliyuncs.com/img/image-20210225131807217.png" alt="image-20210225131807217" style="zoom:67%;"><p>发现 master 分支已经向前走了一次提交，此时的分支图如下：</p><p><img src="http://targzp-picture.oss-cn-beijing.aliyuncs.com/img/image-20210225131846712.png" alt="image-20210225131846712"></p><p>此时我们知道 A 同事开发的 dev 分支是基于 C2 提交点切出来的，<strong>而这个时候master分支已经被更新了</strong></p><br><p>5、如果 A 同事开发完毕，需要将其所作的功能合并到 master 分支，他可以有两种选择：</p><ul><li><p>==<strong>直接 git merge</strong>==</p><p>找出 dev 分支和 master 分支的最近共同祖先 commit 点，即 C2</p><p><strong>将 dev 最新一次 commit（C5）和 master 最新一次 commit（C6）合并后生成一个新的 commit （C7），有冲突的话需要解决冲突</strong></p><p>将以上两个分支 dev 和 master 上的所有提交点<strong>（从 C2 以后的）按照提交时间的先后顺序进行依次放到 master 分支上</strong></p><p><img src="http://targzp-picture.oss-cn-beijing.aliyuncs.com/img/image-20210225145021169.png" alt="image-20210225145021169"></p></li><li><p>==<strong>git rebase 后再 git merge</strong>==</p><p>rebase 之前需要将 master 分支拉到最新</p><p>切换分支到需要 rebase 的分支，这里是 dev 分支</p><p>执行 <code>git rebase master</code>，有冲突就解决冲突，解决后直接 git add，再 <code>git rebase --continue</code> 即可</p><p>此时的 git log 如下：</p><img src="http://targzp-picture.oss-cn-beijing.aliyuncs.com/img/image-20210225145628400.png" alt="image-20210225145628400" style="zoom:67%;"><p>可以发现其一并没有多出一次commit，<strong>其二dev后面几次提交的commit hash值已经变了，包括C3，C4，C5</strong></p></li></ul><br><p>6、切换到 master 分支，执行 <code>git merge dev</code></p><img src="http://targzp-picture.oss-cn-beijing.aliyuncs.com/img/image-20210225145823723.png" alt="image-20210225145823723" style="zoom:67%;"><p>发现采用 rebase 的方式进行分支合并，整个 master 分支并没有多出一个新的 commit，原来 dev 分支上那几次（C3，C4，C5）commit 在 rebase 之后其 hash 值发生了变化，不再是当初再 dev 分支上提交的时候的 hash 值了，==<strong>但是提交的内容被全部复制保留了，并且整个 master 分支的 commit 记录呈线性记录</strong>== </p><img src="http://targzp-picture.oss-cn-beijing.aliyuncs.com/img/image-20210225150145967.png" alt="image-20210225150145967" style="zoom:67%;"><br><p>7、总结：</p><ul><li>git merge 操作合并分支会让两个分支的每一次提交都按照提交时间（并不是push时间）排序，并且会将两个分支的最新一次commit点进行合并成一个新的commit，最终的分支树呈现非整条线性直线的形式</li><li><span class="github-emoji"><span>⭐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>git rebase操作实际上是将当前执行rebase分支的所有基于原分支提交点之后的commit打散成一个一个的patch，并重新生成一个新的commit hash值，<strong>再次基于原分支目前最新的commit点上进行提交，并不根据两个分支上实际的每次提交的时间点排序，rebase完成后，切到基分支进行合并另一个分支时也不会生成一个新的commit点，可以保持整个分支树的完美线性</strong></li></ul><br><p>8、另外值得一提的是，当我们开发一个功能时，可能会在本地有无数次commit，而你实际上在你的master分支上只想显示每一个功能测试完成后的一次完整提交记录就好了，其他的提交记录并不想将来全部保留在你的master分支上，那么rebase将会是一个好的选择，<strong>他可以在rebase时将本地多次的commit合并成一个commit，还可以修改commit的描述等</strong></p><hr><br><br><h2 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h2><p>1、发布一个版本时，我们通常先在版本库中打一个 ==<strong>标签（tag）</strong>==，这样，<strong>就唯一确定了打标签时刻的版本</strong>。将来无论什么时候，取某个标签的版本，就是把那个打标签的时刻的历史版本取出来。所以，标签也是版本库的一个快照。</p><br><p>2、Git的标签虽然是版本库的快照，==<strong>但其实它就是指向某个commit的固定指针</strong>==（跟分支很像对不对？但是分支可以移动，标签不能移动），所以，创建和删除标签都是瞬间完成的。</p><br><h4 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h4><p>1、在 GIt 中打标签非常简单，首先，切换到需要打标签的分支上：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git branch* dev  master$ git switch masterSwitched to branch <span class="string">'master'</span></span></span><br></pre></td></tr></tbody></table></figure><p>然后，输入命令 <strong><code>git tag &lt;name&gt;</code></strong> <strong>就可以打一个新标签</strong>：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git tag v1.0</span></span><br></pre></td></tr></tbody></table></figure><p>可以用命令 ==<strong>git tag</strong>== <strong>查看所有标签</strong>：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git tagv1.0</span></span><br></pre></td></tr></tbody></table></figure><p>==<strong>默认标签是打在最新提交的 commit 上的</strong>==</p><br><p>2、有时候，如果忘了打标签，比如，现在已经是周五了，但应该在周一打的标签没有打，怎么办？==<strong>方法是找到历史提交的 commit id，然后打上就可以了</strong>==</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> --pretty=oneline --abbrev-commit12a631b (HEAD -&gt; master, tag: v1.0, origin/master) merged bug fix 1014c805e2 fix bug 101e1e9c68 merge with no-fff52c633 add mergecf810e4 conflict fixed5dc6824 &amp; simple14096d0 AND simpleb17d20e branch testd46f35e remove test.txtb84166e add test.txt519219b git tracks changese43a48b understand how stage works1094adb append GPLe475afc add distributedeaadf4e wrote a readme file</span></span><br></pre></td></tr></tbody></table></figure><p>比方说要对 <code>add merge</code> 这次提交打标签，**它对应的 commit id 是 <code>f52c633</code>**，敲入命令：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag v0.9 f52c633</span><br></pre></td></tr></tbody></table></figure><p>再用命令 <code>git tag</code> 查看标签：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git tagv0.9v1.0</span></span><br></pre></td></tr></tbody></table></figure> <br><p>3、注意，标签不是按时间顺序列出，而是按字母排序的。可以用 <code>git show &lt;tagname&gt;</code> <strong>查看标签信息</strong>：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git show v0.9commit f52c63349bc3c1593499807e5c8e972b82c8f286 (tag: v0.9)Author: Michael Liao &lt;askxuefeng@gmail.com&gt;Date:   Fri May 18 21:56:54 2018 +0800    add mergediff --git a/readme.txt b/readme.txt...</span></span><br></pre></td></tr></tbody></table></figure><p>可以看到，v0.9 确实打在 add merge 这次提交上</p><br><p>4、还可以创建带有说明的标签，用 ==<strong>-a</strong>== <strong>指定标签名</strong>，==<strong>-m</strong>== <strong>指定说明文字</strong>：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git tag -a v0.1 -m  <span class="string">"version 0.1 released"</span> 1094adb</span></span><br></pre></td></tr></tbody></table></figure><p>用命令 <code>git show &lt;tagname&gt;</code> 可以看到说明文字：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git show v0.1tag v0.1Tagger: Michael Liao &lt;askxuefeng@gmail.com&gt;Date:   Fri May 18 22:48:43 2018 +0800version 0.1 releasedcommit 1094adb7b9b3807259d8cb349e7df1d4d6477073 (tag: v0.1)Author: Michael Liao &lt;askxuefeng@gmail.com&gt;Date:   Fri May 18 21:06:15 2018 +0800    append GPLdiff --git a/readme.txt b/readme.txt...</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p> 注意：<strong>标签总是和某个commit挂钩</strong>。如果这个commit既出现在master分支，又出现在dev分支，那么在这两个分支上都可以看到这个标签</p></blockquote><br><h4 id="操作标签"><a href="#操作标签" class="headerlink" title="操作标签"></a>操作标签</h4><p>1、如果标签打错了，也可以删除：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git tag -d v1.0Deleted tag <span class="string">'v1.0'</span>(was f125b0dd)</span></span><br></pre></td></tr></tbody></table></figure><p><strong>因为创建的标签都只存储在本地，不会自动推送到远程。所以，打错的标签可以在本地安全删除</strong></p><br><p>2、如果要<strong>推送某个标签到远程</strong>，使用命令 <code>git push origin &lt;tagname&gt;</code> :</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git push origin v1.0Total 0 (delta 0), reused 0 (delta 0)To github.com:michaelliao/learngit.git * [new tag]         v1.0 -&gt; v1.0</span></span><br></pre></td></tr></tbody></table></figure><p>或者，<strong>一次性推送全部尚未推送到远程的本地标签</strong></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git push origin --tagsTotal 0 (delta 0), reused 0 (delta 0)To github.com:michaelliao/learngit.git * [new tag]         v0.9 -&gt; v0.9</span></span><br></pre></td></tr></tbody></table></figure><br><p>3、<strong>如果标签已经推送到远程，要删除远程标签就麻烦一点</strong>，<strong>先从本地删除</strong>：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git tag -d v0.9Deleted tag <span class="string">'v0.9'</span> (was f52c633)</span></span><br></pre></td></tr></tbody></table></figure><p>然后，<strong>从远程删除。删除命令也是 push</strong>，但是格式如下：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git push origin :refs/tags/v0.9To github.com:michaelliao/learngit.git - [deleted]         v0.9</span></span><br></pre></td></tr></tbody></table></figure><p>或者也可以使用如下命令删除远程库的指定标签</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git push origin -d v0.9To github.com:michaelliao/learngit.git - [deleted]         v0.9</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客</title>
      <link href="/2021/07/28/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2021/07/28/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="你好-世界！"><a href="#你好-世界！" class="headerlink" title="你好 世界！"></a>你好 世界！</h1>]]></content>
      
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
